buildscript {
  repositories { 
    jcenter() 
  }
  dependencies {
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.3'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
  }
}

apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'artifactory'

allprojects {
  repositories {
    jcenter()
  }

  apply plugin: 'idea'
  apply plugin: 'groovy'
  apply plugin: 'jacoco'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: 'artifactory'
 
  ext {
    ratpackVersion = "1.0.0"
  }

  jacoco {
      toolVersion = '0.7.1.201405082137'
  }

  group = "com.danveloper.ratpack.workflow"
  version = "0.1-SNAPSHOT"

  dependencies {
    testCompile "org.codehaus.groovy:groovy-all:2.4.3"
    testCompile "io.ratpack:ratpack-groovy-test:${ratpackVersion}"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  }

  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
      html.destination "${buildDir}/jacocoHtml"
    }
  }

  artifactory {
    contextUrl = 'http://oss.jfrog.org'
  }

  artifactoryPublish { task ->
    rootProject.artifactory {
      publish {
        repository {
          repoKey = version.endsWith("-SNAPSHOT") ? 'oss-snapshot-local' : 'oss-release-local'
          gradle.taskGraph.whenReady { taskGraph ->
            if (taskGraph.hasTask(task)) {
              username = bintrayUser
              password = bintrayKey
            }
          }
        }
      }
    }
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
      }

      artifact sourceJar {
        classifier "sources"
      }
    }
  }
}

coveralls {
  sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
  dependsOn = subprojects.test
  sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories =  files(subprojects.sourceSets.main.output)
  executionData = files(subprojects.jacocoTestReport.executionData)
  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
    xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}
